(function (module) {
	"use strict";

	var trim = require('trim');

	module.exports = {

		stripAttr: function (str, allow) {
			if (typeof allow === 'undefined') allow = [];
			if (typeof allow === 'string') {
				allow = allow.split(',');
				var newallow = {};
				for (var i = 0; i < allow.length; i++) {
					allow[i] = trim(allow[i]).split('.');
					if (allow[i].length === 2) {
						if (typeof newallow[allow[i][0]] === 'undefined') {
							newallow[allow[i][0]] = [];
						}
						newallow[allow[i][0]].push(allow[i][1]);
					}
				}
				allow = newallow;
			}
			var tags = str.match(/<[^<>]+>/g);
			if (tags !== null) {
				tags.forEach(function(match) {
					var wholetag = trim.right(match.substr(1, match.length - 2));

					var exit = '>';
					if (wholetag.substr(wholetag.length - 1) === '/') {
						exit = '/>';
						wholetag = trim.right(wholetag.substr(0, wholetag.length - 1));
					}

					var elementname = '';
					var attribs = '';
					if (wholetag.indexOf(' ') !== -1) {
						elementname = wholetag.substr(0, wholetag.indexOf(' ')).toLowerCase();
						if (typeof allow[elementname] !== 'undefined') {
							var prevwholetag = '';
							wholetag = wholetag.substr(elementname.length) + ' ';
							while (wholetag != prevwholetag) {
								prevwholetag = wholetag;
								wholetag = trim.left(wholetag);
									var m = wholetag.match('^[^ =]+ ');
									if (m) {
										m = m[0];
										if (allow[elementname].indexOf(trim(m.substr(0, m.length - 1)).toLowerCase()) !== -1) {
											attribs += ' ' + m.substr(0, m.length - 1);
										}
										wholetag = wholetag.substr(m.length);
									}
									m = wholetag.match('^[^ =]+="[^"]*" ');
									if (m) {
										m = m[0];
										if (allow[elementname].indexOf(trim(m.substr(0, m.indexOf('='))).toLowerCase()) !== -1) {
											attribs += ' ' + m.substr(0, m.length - 1);
										}
										wholetag = wholetag.substr(m.length);
									}
									m = wholetag.match("^[^ =]+='[^']*' ");
									if (m) {
										m = m[0];
										if (allow[elementname].indexOf(trim(m.substr(0, m.indexOf('='))).toLowerCase()) !== -1) {
											attribs += ' ' + m.substr(0, m.length - 1);
										}
										wholetag = wholetag.substr(m.length);
									}
							}
						}
					}

					if (elementname !== '') {
						str = str.replace(match, '<' + elementname + attribs + exit);
					}
				});
			}
			return str;
		},

		stripTags: function (str, allow) {
			var i;
			if (typeof allow === 'undefined') allow = [];
			if (typeof allow === 'string') {
				allow = allow.split(',');
				for (i = 0; i < allow.length; i++) {
					allow[i] = trim(allow[i]);
				}
			}
			for (i = 0; i < allow.length; i++) {
				allow[i] = allow[i].toLowerCase();
			}
			var tags = str.match(/<[^<>]+>/g);
			if (tags !== null) {
				tags.forEach(function(match) {
					var tag = match.substr(1, match.length - 2).toLowerCase();
					if (tag.substr(0, 1) == '/') tag = tag.substr(1);
					if (tag.substr(tag.length - 1) == '/') tag = tag.substr(0, tag.length - 1);
					if (tag.indexOf(' ') !== -1) {
						tag = tag.substr(0, tag.indexOf(' '));
					}
					if (allow.indexOf(tag) !== -1) return;
					str = str.replace(match, '');
				});
			}
			return str;
		}

	};
}(module));
