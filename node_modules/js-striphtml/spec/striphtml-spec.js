var striphtml = require('../index.js');

describe('stripTags', function () {
	it('should remove self-closing element', function () {
		var html = 'First<br />Second';
		expect(striphtml.stripTags(html)).toBe('FirstSecond');
	});
	it('should remove opening element', function () {
		var html = '<div>Yay';
		expect(striphtml.stripTags(html)).toBe('Yay');
	});
	it('should remove closing element', function () {
		var html = 'Yay</div>';
		expect(striphtml.stripTags(html)).toBe('Yay');
	});
	it('should remove multiple elements in same string', function () {
		var html = '<div>First<br />Second</div>';
		expect(striphtml.stripTags(html)).toBe('FirstSecond');
	});
	it('should not remove allowed tag', function () {
		var html = '<div>First<br />Second</div>';
		expect(striphtml.stripTags(html, ['br'])).toBe('First<br />Second');
	});
	it('should understand allowed tags as comma separated string', function () {
		var html = '<div><i>First</i><br /><b>Second</b></div>';
		expect(striphtml.stripTags(html, 'br, i')).toBe('<i>First</i><br />Second');
	});
	it('should be case-insensitive about allowed tags', function () {
		var html = '<div>First<BR />Second</div>';
		expect(striphtml.stripTags(html, ['br'])).toBe('First<BR />Second');
	});
	it('should understand tags with attributes', function () {
		var html = '<div class="test">First<BR />Second</div>';
		expect(striphtml.stripTags(html, ['div'])).toBe('<div class="test">FirstSecond</div>');
	});
});
describe('stripAttr', function () {
	it('should remove attributes without value', function () {
		var html = '<div yada>First</div>';
		expect(striphtml.stripAttr(html)).toBe('<div>First</div>');
	});
	it('should remove multiple attributes without value', function () {
		var html = '<div yada><span wtf omg>First</span></div>';
		expect(striphtml.stripAttr(html)).toBe('<div><span>First</span></div>');
	});
	it('should remove attribute with value', function () {
		var html = '<div yada="abc">First</div>';
		expect(striphtml.stripAttr(html)).toBe('<div>First</div>');
	});
	it('should remove multiple attributes with value', function () {
		var html = '<div yada="abc"><span wtf="def" omg="ghi">First</span></div>';
		expect(striphtml.stripAttr(html)).toBe('<div><span>First</span></div>');
	});
	it('should remove attribute with value with space', function () {
		var html = '<div yada="abc 123">First</div>';
		expect(striphtml.stripAttr(html)).toBe('<div>First</div>');
	});
	it('should remove multiple attributes with value with space', function () {
		var html = '<div yada="abc 123"><span wtf="def 456" omg="ghi 789">First</span></div>';
		expect(striphtml.stripAttr(html)).toBe('<div><span>First</span></div>');
	});
	it('should not remove allowed attributes without value', function () {
		var html = '<div yada="abc 123"><span wtf="def 456" omg="ghi 789">First<img src="blank.gif" width="1" height="1" test /></span></div>';
		expect(striphtml.stripAttr(html, { 'img': [ 'test' ] })).toBe('<div><span>First<img test/></span></div>');
	});
	it('should not remove allowed attributes with value within quotes', function () {
		var html = '<div yada="abc 123"><span wtf="def 456" omg="ghi 789">First<img src="blank.gif" width="1" height="1" /></span></div>';
		expect(striphtml.stripAttr(html, { 'img': [ 'src' ] })).toBe('<div><span>First<img src="blank.gif"/></span></div>');
	});
	it('should not remove allowed attributes with value within single quotes', function () {
		var html = "<div yada='abc 123'><span wtf='def 456' omg='ghi 789'>First<img src='blank.gif' width='1' height='1' /></span></div>";
		expect(striphtml.stripAttr(html, { 'img': [ 'src' ] })).toBe("<div><span>First<img src='blank.gif'/></span></div>");
	});
	it('should survive sending a string without any tags in it.', function () {
		expect(striphtml.stripAttr('nothing here to see', { 'img': [ 'src' ] })).toBe('nothing here to see');
	});
	it('should understand allowed attributes as comma separated string', function () {
		var html = '<div yada="abc 123"><span wtf="def 456" omg="ghi 789">First<img src="blank.gif" width="1" height="1" test="test" /></span></div>';
		expect(striphtml.stripAttr(html, 'span.omg, img.test')).toBe('<div><span omg="ghi 789">First<img test="test"/></span></div>');
	});
	it('should survive sending an empty string', function () {
		expect(striphtml.stripAttr('', { 'img': [ 'src' ] })).toBe('');
	});
});

